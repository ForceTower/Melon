ext {
    buildVersion = {
        //Perform git commands
        def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
        def last_tag = 'git rev-list --tags --no-walk --max-count=1'.execute([], project.rootDir).text.trim()
        def newCommits = Integer.parseInt("git rev-list ${last_tag}..HEAD --count".execute([], project.rootDir).text.trim())

        def prefix = ""
        def (major, minor, patch) = version.toLowerCase().replaceAll('-', '').tokenize('.')
        if (patch.endsWith("development")) {
            patch = patch.replaceAll("[^0-9]","")
            prefix = "dev_"
        } else {
            if (patch.endsWith("candidate")) {
                patch = patch.replaceAll("[^0-9]", "")
                prefix = "rc_"
            }
            //If this is not a development build, create a tag for it
            "git tag v${version}".execute([], project.rootDir)
        }

        (major, minor, patch, newCommits) = [major, minor, patch, newCommits].collect{it.toInteger()}

        //For the version 12.7.4 will be generated the code: 21274CC
        def name = "${major}.${minor}.${patch} ${prefix}build ${gitSha.substring(0, 4)}${newCommits}"
        def code = (2 * 1000000) + (major * 10000) + (minor * 1000) + (patch * 100) + newCommits
        return [code, name]
    }
}