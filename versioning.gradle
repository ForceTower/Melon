/*
 * This file is part of the UNES Open Source Project.
 * UNES is licensed under the GNU GPLv3.
 *
 * Copyright (c) 2020. Jo√£o Paulo Sena <joaopaulo761@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

ext {
    buildVersion = {
        try {
//            def tag_count = Integer.parseInt('git tag | wc -l'.execute([], project.rootDir).text.trim())
            def commit_count = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())
            def branch = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim()
            def last_tag_commit = "git rev-list --tags --max-count=1".execute([], project.rootDir).text.trim()
            def last_tag = "git describe --tags ${last_tag_commit}".execute([], project.rootDir).text.trim()
            def last_commit = "git rev-parse HEAD".execute([], project.rootDir).text.trim().substring(0, 7)

            def (major, minor, patch) = last_tag.toLowerCase().replaceAll('-', '.').tokenize('.')

            def postfix = "main"
            def adder = 10000
            if (branch == "development") {
                adder = 20000
                postfix = "beta"
            } else if (branch.startsWith("feature/")) {
                adder = 20000
                postfix = branch.replace("feature/", "")
            }

            (major, minor, patch) = [major, minor, patch.replaceAll("[^0-9]", "")].collect { it.toInteger() }

            def name = "${major}.${minor}.${patch}.${commit_count}.rev-${postfix} [${last_commit}]"
            def code = (21 * 100000) + commit_count + adder
            return [code, name]
        } catch (Exception ignored) {
            System.err.println("No git installed on the machine or not on a git repo. UNES will not automate version name and code")
            return [1, '1.0.0-rev0.no.git']
        }
    }
}