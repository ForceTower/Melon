/*
 * This file is part of the UNES Open Source Project.
 * UNES is licensed under the GNU GPLv3.
 *
 * Copyright (c) 2020. Jo√£o Paulo Sena <joaopaulo761@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import java.nio.file.Files

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'org.jmailen.kotlinter'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId 'com.forcetower.uefs'
        minSdkVersion 21
        targetSdkVersion 31
        def (code, name) = buildVersion()
        versionCode code
        versionName name
        multiDexEnabled true

        buildConfigField "String", "SIECOMP_TIMEZONE", "\"America/Bahia\""
        buildConfigField "String", "SIECOMP_DAY1_START", "\"2019-10-16T08:00:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY1_END", "\"2019-10-16T17:30:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY2_START", "\"2019-10-17T08:00:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY2_END", "\"2019-10-17T17:30:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY3_START", "\"2019-10-18T08:00:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY3_END", "\"2019-10-18T17:30:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY4_START", "\"2019-10-21T08:00:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY4_END", "\"2019-10-21T17:30:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY5_START", "\"2019-10-22T08:00:00-03:00\""
        buildConfigField "String", "SIECOMP_DAY5_END", "\"2019-10-22T17:30:00-03:00\""

        buildConfigField "String", "UEFS_DEFAULT_PROXY", "\"10.65.16.2:3128\""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                    "room.schemaLocation": "$projectDir/schemas".toString(),
                    "room.incremental"   : "true"
                ]
            }
        }

        ndk {
            abiFilters "arm64-v8a", "armeabi", "armeabi-v7a", "mips", "mips64", "x86", "x86_64"
        }

        ndkVersion "21.3.6528147"

        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    signingConfigs {
        release {
            def password = System.getenv("UNES_KEYSTORE_PASSWORD")
            if (password == null)
                password = "android"

            def alias = System.getenv("UNES_KEYSTORE_ALIAS")
            if (alias == null)
                alias = "androiddebugkey"

            def keyPass = System.getenv("UNES_KEYSTORE_PRIVATE_KEY_PASSWORD")
            if (keyPass == null)
                keyPass = "android"

            def signFile = rootProject.file("sign.jks")
            if (!signFile.exists())
                signFile = rootProject.file("debug.keystore")

            storeFile signFile
            storePassword password
            keyAlias alias
            keyPassword keyPass
        }
        debug {
            storeFile rootProject.file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        def mapsKey = System.getenv("UNES_MAPS_KEY")
        if (mapsKey == null) {
            mapsKey = "AIzaSyAIb0g7GrjLgOwRqmKHhBxbxWKjct8IF8Y"
        }
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            manifestPlaceholders = [crashlyticsEnabled: true]
            resValue("string", "google_maps_key", mapsKey)
        }
        debug {
            applicationIdSuffix '.debug'
            manifestPlaceholders = [crashlyticsEnabled: false]
            resValue("string", "google_maps_key", "AIzaSyAIb0g7GrjLgOwRqmKHhBxbxWKjct8IF8Y")
        }
    }

    buildFeatures {
        dataBinding true
    }

    kapt {
        correctErrorTypes true
        javacOptions {
            option("-Xmaxerrs", 1000)
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'InvalidPackage'
        disable 'NullSafeMutableLiveData'
        abortOnError true

        ignoreTestSources true
        checkDependencies true
    }
    dynamicFeatures = [
        ":dynamic-features:aeri",
        ":dynamic-features:dashboard",
        ":dynamic-features:conference",
        ":dynamic-features:event",
        ":dynamic-features:map",
        ":dynamic-features:disciplines"
    ]

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

play {
    def branch = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim()
    def publishTrack = "internal"
    if (branch == "main") publishTrack = "production"

    serviceAccountCredentials.set(rootProject.file("unes_uefs_publisher.json"))
    track.set(publishTrack)
    defaultToAppBundles.set(true)
}

kotlinter {

}

dependencies {
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$coreDesugar"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':bypass')
    implementation project(path: ':core')

    // Auto start
    implementation 'com.github.judemanutd:autostarter:1.0.8'

    // Portal scrapper
    implementation "dev.forcetower.unes:juice:$juice"
    implementation "dev.forcetower.unes:snowpiercer:$snowpiercer"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.3.5'

    // Android X
    implementation "androidx.core:core-ktx:$ktx"
    implementation "androidx.annotation:annotation:$annotation"
    implementation "androidx.appcompat:appcompat:$app_compat"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout"
    implementation "com.google.android.material:material:$google_material"
    implementation "androidx.palette:palette-ktx:$pallete"
    implementation "androidx.browser:browser:$browser"
    implementation "androidx.preference:preference-ktx:$preference"
    implementation "com.google.android:flexbox:$flexbox"
    implementation "androidx.fragment:fragment-ktx:$fragment"
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    // Architecture
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$paging"

    // Room
    kapt "androidx.room:room-compiler:$room"

    // Dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_dagger"
    implementation "androidx.hilt:hilt-work:$hilt_androidx"
    kapt "com.google.dagger:hilt-compiler:$hilt_dagger"
    kapt "androidx.hilt:hilt-compiler:$hilt_androidx"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:28.4.0')
    implementation "com.google.firebase:firebase-core"
    implementation "com.google.firebase:firebase-auth"
    implementation "com.google.firebase:firebase-messaging"
    implementation "com.google.firebase:firebase-firestore-ktx"
    implementation "com.google.firebase:firebase-storage"
    implementation "com.google.firebase:firebase-config"
    implementation "com.google.firebase:firebase-functions"
    implementation "com.google.firebase:firebase-crashlytics-ktx"
    implementation "com.firebaseui:firebase-ui-storage:$firebase_ui_storage"

    // Logs
    implementation "com.jakewharton.timber:timber:$timber"

    // Google Play
    implementation "com.google.android.gms:play-services-games:$gp_games"
    implementation "com.google.android.gms:play-services-auth:$gp_auth"
    implementation "com.google.android.gms:play-services-location:$gp_location"
    implementation "com.android.billingclient:billing:$gp_billing_client"
    implementation "com.google.android.play:core:$gp_core"
    implementation "com.google.android.play:core-ktx:$gp_core_ktx"

    // Image
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
    implementation "com.airbnb.android:lottie:$lottie"

    // About Libraries
    implementation "com.mikepenz:aboutlibraries-core:$about_libraries"
    implementation "com.mikepenz:aboutlibraries:$about_libraries"

    // Others
    implementation "com.google.code.gson:gson:$gson"
    implementation "org.jsoup:jsoup:$jsoup"
    implementation "com.github.PhilJay:MPAndroidChart:$chart_view"
    implementation "pub.devrel:easypermissions:$easy_permissions"
    implementation "com.ramotion.cardslider:card-slider:$card_slider"
    implementation "com.github.arimorty:floatingsearchview:$floating_search"
    implementation "io.reactivex.rxjava2:rxkotlin:$rx_kotlin"
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.13.3'

    implementation "com.google.android.gms:play-services-maps:17.0.1"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:1.10.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task buildNotes {
    doFirst {
        try {
            def branch = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim()
            if (branch == "main") {
                def lastTag = "git describe --abbrev=0".execute([], project.rootDir).text.trim()
                def tagMessage = "git tag -l --format=%(contents) ${lastTag}".execute([], project.rootDir).text.trim()
                def production = new File(project.rootDir, "app/src/main/play/release-notes/pt-BR/production.txt")
                production.text = tagMessage
            } else if (branch == "development") {
                def message = "git log -1 --pretty=%B".execute([], project.rootDir).text.trim().split(":").reverse()[0]
                def internal = new File(project.rootDir, "app/src/main/play/release-notes/pt-BR/internal.txt")
                internal.text = message
            }
        } catch (Exception ignored) {
            System.err.println("No git installed on the machine or not on a git repo. UNES will not generate release notes")
        }
    }
}

afterEvaluate {
    def publish = tasks.findByName("publishReleaseBundle")
    if (publish != null) {
        publish.configure {
            dependsOn("buildNotes")
        }
    }
}

def googleServices = file("google-services.json")
if (!googleServices.exists()) {
    Files.copy(file("google-services-mock.json").toPath(), googleServices.toPath())
}

apply plugin: 'com.google.gms.google-services'
